// ignore_for_file: avoid_print

import 'dart:io';
import 'package:recase/recase.dart';
import 'package:rw_git/rw_git.dart';

// Utilities
// convert string to snake case
String convertToSnakeCase(String e) {
  // convert e to lower case
  e = e.toLowerCase();
  // split e by _ or - or space
  final split = e.split(RegExp(r'[_\s]'));
  // create snake_case from split
  return split.join('_');
}

// remove ! from the string e
String removeExclamationMark(String e) {
  return e.replaceAll('!', '');
}

/// Create a directory to clone the repository into.
String _createCheckoutDirectory(String directoryName) {
  Directory checkoutDirectory = Directory(directoryName);
  try {
    checkoutDirectory.deleteSync(recursive: true);
  } catch (e) {
    print("Failed to delete the checkout directory: $e");
  }
  checkoutDirectory.createSync();
  return "${Directory.current.path}/$directoryName";
}

// main
void main() async {
  print("Starting the script...");

  final rwGit = RwGit();
  const repositoryUrl = "https://github.com/microsoft/fluentui-emoji.git";
  const localDirectoryName = 'fluentui';
  const notSupportedIconNames = [
    'Pi√±ata'
  ]; // This icon is not supported because it is not a valid english word

  String localDirectoryToCloneInto =
      _createCheckoutDirectory(localDirectoryName);
  if (localDirectoryName.isEmpty) {
    return;
  }

  // 1. Clone the "fluentui-emoji" repository into the local directory
  print("Cloning the repository into $localDirectoryToCloneInto...");

  final result = await rwGit.clone(localDirectoryToCloneInto, repositoryUrl);

  if (!result) {
    print("Failed to clone the repository.");
    return;
  }

  print("Successfuly cloned the repository into $localDirectoryToCloneInto.");

  // 2. Get the directory name list from the cloned repository
  print("Getting the directory list...");

  final directoryList =
      Directory("$localDirectoryToCloneInto/fluentui-emoji/assets")
          .listSync()
          .whereType<Directory>()
          .map((e) => e.path.split('/').last)
          .toList();

  if (directoryList.isEmpty) {
    print("Failed to get the directory list.");
    return;
  }

  print("Successfuly get the directories: ${directoryList.length}");

  // remove the noteSupportedIconNames from directoryList
  directoryList.removeWhere((e) => notSupportedIconNames.contains(e));

  // 3. Get svg raw string from svg file stored in the directoryList
  print("Getting the svg list...");

  final svgListJson = <String, String>{};
  for (final directory in directoryList) {
    // [NOTE] O button blood type is a special case
    if (directory == "O button blood type") {
      final svgFile = File(
          "$localDirectoryToCloneInto/fluentui-emoji/assets/$directory/Color/o_button_(blood_type)_color.svg");
      if (svgFile.existsSync()) {
        svgListJson[convertToSnakeCase(directory)] = svgFile.readAsStringSync();
      } else {
        print(
          "Failed to get the svg file: $localDirectoryToCloneInto/fluentui-emoji/assets/$directory/Color/${convertToSnakeCase(directory)}_color.svg",
        );
      }
      continue;
    }
    // [NOTE] Some icons are stored in the Color folder
    final svgFile = File(
        "$localDirectoryToCloneInto/fluentui-emoji/assets/$directory/Color/${convertToSnakeCase(directory)}_color.svg");
    if (svgFile.existsSync()) {
      svgListJson[convertToSnakeCase(directory)] = svgFile.readAsStringSync();
    } else {
      // [NOTE] Some icons are stored in the Default/Color folder
      final svgFile = File(
          "$localDirectoryToCloneInto/fluentui-emoji/assets/$directory/Default/Color/${convertToSnakeCase(directory)}_color_default.svg");
      if (svgFile.existsSync()) {
        svgListJson[convertToSnakeCase(directory)] = svgFile.readAsStringSync();
      } else {
        print(
          "Failed to get the svg file: $localDirectoryToCloneInto/fluentui-emoji/assets/$directory/Color/${convertToSnakeCase(directory)}_color.svg",
        );
      }
    }
  }

  if (svgListJson.isEmpty) {
    print("Failed to get the svg list.");
    return;
  }

  print("Successfuly get the svg list: ${svgListJson.length}");

  // 4. Create a dart file to store the svg raw string
  print("Creating the dart file to store the svg raw string...");

  final file = File('lib/src/generated_fluentui_emoji_icon_data.dart');
  if (file.existsSync()) {
    file.deleteSync();
  }
  file.createSync();
  file.writeAsStringSync('''
  // Path: lib/fluentui_emoji_icon_data.dart
  // This file is automatically generated by the sync_fluentui_emoji.dart script.
  // Do not edit this file manually.
  //
  // To update the emoji icon data, run the following command:
  // dart tool/sync_fluentui_emoji.dart
  import 'package:fluentui_emoji_icon/src/fluent_data.dart';

  class Fluents {
    Fluents._();
    ${svgListJson.entries.map((e) => "static const FluentData fl${ReCase(removeExclamationMark((e).key)).pascalCase} = FluentData('${convertToSnakeCase((e).key)}', \n '''${e.value}''');\n").toList().join('')}
  }
  ''');

  print("Successfuly created the dart file to store the svg raw string.");

  print("Finished the script.");
}
